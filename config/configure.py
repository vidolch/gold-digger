#!/usr/bin/env python3
"""
Gold Digger Configuration Management Utility
Easy setup and management of configuration options.
"""

import os
import sys
from pathlib import Path
import argparse
import subprocess

def print_banner():
    """Print the configuration banner."""
    print("""
╔══════════════════════════════════════════════════════════════╗
║                 🏆 GOLD DIGGER CONFIGURATOR                  ║
║                   Configuration Management                    ║
╚══════════════════════════════════════════════════════════════╝
    """)

def check_dependencies():
    """Check if required packages are installed."""
    required_packages = [
        ('yfinance', 'yfinance'),
        ('pandas', 'pandas'),
        ('ollama', 'ollama'),
        ('dotenv', 'python-dotenv'),
        ('matplotlib', 'matplotlib')
    ]

    missing = []
    for package, pip_name in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing.append(pip_name)

    return missing

def install_dependencies(missing_packages):
    """Install missing dependencies."""
    print(f"📦 Installing missing packages: {', '.join(missing_packages)}")
    try:
        subprocess.check_call([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ])
        print("✅ All dependencies installed successfully!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to install dependencies: {e}")
        return False

def check_ollama():
    """Check Ollama installation and model availability."""
    print("\n🔍 Checking Ollama setup...")

    # Check if Ollama is installed
    try:
        result = subprocess.run(['ollama', '--version'],
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ Ollama is installed")
        else:
            print("❌ Ollama is not installed")
            return False
    except FileNotFoundError:
        print("❌ Ollama command not found. Please install from https://ollama.ai")
        return False

    # Check if Ollama service is running
    try:
        import ollama
        client = ollama.Client()
        models = client.list()
        print("✅ Ollama service is running")

        # Check for gpt-oss:20b model
        model_names = [model['model'] for model in models['models']]
        if 'gpt-oss:20b' in model_names:
            print("✅ gpt-oss:20b model is available")
            return True
        else:
            print("⚠️  gpt-oss:20b model not found")
            print("Available models:", ', '.join(model_names) if model_names else "None")

            response = input("Install gpt-oss:20b model now? (y/N): ")
            if response.lower() == 'y':
                return install_ollama_model()
            return False

    except Exception as e:
        print(f"❌ Cannot connect to Ollama service: {e}")
        print("Make sure Ollama is running with: ollama serve")
        return False

def install_ollama_model():
    """Install the required Ollama model."""
    print("📥 Installing gpt-oss:20b model (this may take a while)...")
    try:
        subprocess.check_call(['ollama', 'pull', 'gpt-oss:20b'])
        print("✅ gpt-oss:20b model installed successfully!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to install model: {e}")
        return False

def create_env_file():
    """Create or update .env file with user preferences."""
    print("\n📝 Setting up configuration file...")

    env_content = """# Gold Digger Configuration
# Generated by configurator

# =============================================================================
# OLLAMA CONFIGURATION
# =============================================================================
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=gpt-oss:20b
OLLAMA_TIMEOUT=120

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
DATABASE_PATH=gold_prices.db

# =============================================================================
# TRADING ANALYSIS CONFIGURATION
# =============================================================================
DEFAULT_INTERVAL=15m
DEFAULT_ANALYSIS_HOURS=24
PROMPT_FILE=trading_prompt.txt

# =============================================================================
# DATA FETCHING CONFIGURATION
# =============================================================================
DEFAULT_FETCH_DAYS=14
GOLD_SYMBOL=GC=F
YFINANCE_TIMEOUT=30

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(levelname)s - %(message)s
ENABLE_FILE_LOGGING=false
LOG_FILE=gold_digger.log

# =============================================================================
# EXPORT CONFIGURATION
# =============================================================================
EXPORT_DIR=exports
EXPORT_INCLUDE_VOLUME=true

# =============================================================================
# API CONFIGURATION
# =============================================================================
API_DELAY=1.0
MAX_RETRIES=3

# =============================================================================
# RISK MANAGEMENT DEFAULTS
# =============================================================================
DEFAULT_RISK_LEVEL=MEDIUM
DEFAULT_POSITION_SIZE=0.05

# =============================================================================
# DEVELOPMENT/DEBUG OPTIONS
# =============================================================================
DEBUG_MODE=false
SKIP_MODEL_CHECK=false
USE_MOCK_DATA=false
"""

    # Interactive configuration
    print("\n🔧 Interactive Configuration (press Enter for defaults)")

    # Ollama host
    ollama_host = input(f"Ollama host [http://localhost:11434]: ").strip()
    if ollama_host:
        env_content = env_content.replace('OLLAMA_HOST=http://localhost:11434',
                                        f'OLLAMA_HOST={ollama_host}')

    # Analysis interval
    interval = input("Default analysis interval [15m]: ").strip()
    if interval and interval in ['15m', '30m', '1h']:
        env_content = env_content.replace('DEFAULT_INTERVAL=15m',
                                        f'DEFAULT_INTERVAL={interval}')

    # Fetch days
    days = input("Default days to fetch [14]: ").strip()
    if days and days.isdigit():
        env_content = env_content.replace('DEFAULT_FETCH_DAYS=14',
                                        f'DEFAULT_FETCH_DAYS={days}')

    # Log level
    log_level = input("Log level [INFO]: ").strip().upper()
    if log_level in ['DEBUG', 'INFO', 'WARNING', 'ERROR']:
        env_content = env_content.replace('LOG_LEVEL=INFO',
                                        f'LOG_LEVEL={log_level}')

    # Debug mode
    debug = input("Enable debug mode? (y/N): ").strip().lower()
    if debug == 'y':
        env_content = env_content.replace('DEBUG_MODE=false', 'DEBUG_MODE=true')

    # Write .env file
    if Path('.env').exists():
        backup = input(".env file exists. Create backup? (Y/n): ").strip().lower()
        if backup != 'n':
            Path('.env').rename('.env.backup')
            print("✅ Existing .env backed up to .env.backup")

    with open('.env', 'w') as f:
        f.write(env_content)

    print("✅ .env file created successfully!")

def test_setup():
    """Test the complete setup."""
    print("\n🧪 Testing setup...")

    try:
        # Import config to test
        sys.path.append('.')
        sys.path.append('../src')
        from config.config import get_config
        config = get_config()

        print("✅ Configuration loaded successfully")

        # Test database creation
        from src.core.gold_fetcher import GoldPriceFetcher
        fetcher = GoldPriceFetcher()
        print("✅ Database initialization successful")

        # Test Ollama connection (if not skipped)
        if not config.skip_model_check:
            from src.core.trading_analyzer import TradingAnalyzer
            analyzer = TradingAnalyzer()
            print("✅ Ollama connection successful")

        print("\n🎉 Setup test completed successfully!")
        return True

    except Exception as e:
        print(f"❌ Setup test failed: {e}")
        return False

def show_next_steps():
    """Show next steps after configuration."""
    print("""
╔══════════════════════════════════════════════════════════════╗
║                        🚀 NEXT STEPS                         ║
╚══════════════════════════════════════════════════════════════╝

1. 📊 Fetch gold price data:
   python3 gold_fetcher.py

2. 🤖 Run AI analysis:
   python3 trading_analyzer.py

3. 🏆 Complete analysis:
   python3 run_complete_analysis.py --quick

4. ⚙️  View configuration:
   python3 gold_fetcher.py --config-summary

5. 📝 Edit configuration:
   nano .env

6. 📚 Read documentation:
   cat README.md

╔══════════════════════════════════════════════════════════════╗
║  ⚠️  REMEMBER: This is for educational purposes only!        ║
║     Always do your own research before making trades.       ║
╚══════════════════════════════════════════════════════════════╝
    """)

def main():
    """Main configuration function."""
    parser = argparse.ArgumentParser(description='Gold Digger Configuration Utility')
    parser.add_argument('--quick', '-q', action='store_true',
                       help='Quick setup with defaults')
    parser.add_argument('--install-deps', action='store_true',
                       help='Install dependencies only')
    parser.add_argument('--install-model', action='store_true',
                       help='Install Ollama model only')
    parser.add_argument('--test', action='store_true',
                       help='Test current setup')
    parser.add_argument('--reset', action='store_true',
                       help='Reset configuration to defaults')

    args = parser.parse_args()

    print_banner()

    if args.install_deps:
        missing = check_dependencies()
        if missing:
            install_dependencies(missing)
        else:
            print("✅ All dependencies already installed")
        return

    if args.install_model:
        install_ollama_model()
        return

    if args.test:
        success = test_setup()
        sys.exit(0 if success else 1)

    if args.reset:
        if Path('.env').exists():
            Path('.env').unlink()
            print("✅ Configuration reset (removed .env file)")
        else:
            print("ℹ️  No configuration file to reset")
        return

    # Full setup process
    print("🚀 Starting Gold Digger setup process...")

    # Step 1: Check dependencies
    print("\n📦 Checking Python dependencies...")
    missing = check_dependencies()
    if missing:
        print(f"Missing packages: {', '.join(missing)}")
        if input("Install missing packages? (Y/n): ").strip().lower() != 'n':
            if not install_dependencies(missing):
                print("❌ Setup failed at dependency installation")
                sys.exit(1)
    else:
        print("✅ All Python dependencies are installed")

    # Step 2: Check Ollama
    if not check_ollama():
        if input("Continue without Ollama setup? (y/N): ").strip().lower() != 'y':
            print("❌ Setup aborted - Ollama required for AI analysis")
            sys.exit(1)
        print("⚠️  Continuing without AI analysis capabilities")

    # Step 3: Create configuration
    if args.quick:
        # Quick setup with defaults
        if not Path('.env').exists():
            Path('.env.example').rename('.env')
            print("✅ Quick setup complete - using default configuration")
        else:
            print("ℹ️  Configuration file already exists")
    else:
        # Interactive setup
        create_env_file()

    # Step 4: Test setup
    print(f"\n🧪 Testing setup...")
    if test_setup():
        show_next_steps()
        print("\n🎉 Gold Digger is ready to use!")
    else:
        print("\n❌ Setup incomplete - please check errors above")
        sys.exit(1)

if __name__ == "__main__":
    main()
